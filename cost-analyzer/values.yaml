global:
  # zone: cluster.local (use only if your DNS server doesn't live in the same zone as kubecost)
  prometheus:
    enabled: true # If false, Prometheus will not be installed -- Warning: Before changing this setting, please read to understand this setting https://docs.kubecost.com/install-and-configure/install/custom-prom
  grafana:
    enabled: true # If false, Grafana will not be installed


kubecostFrontend:
  image: "126739741087.dkr.ecr.us-east-1.amazonaws.com/kubecost/frontend"
  imagePullPolicy: Always
  resources:
    requests:
      cpu: "10m"
      memory: "128Mi"
    limits:
      cpu: "20m"
      memory: "256Mi"
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    failureThreshold: 200


# Kubecost Metrics deploys a separate pod which will emit kubernetes specific metrics required
# by the cost-model. This pod is designed to remain active and decoupled from the cost-model itself.
# However, disabling this service/pod deployment will flag the cost-model to emit the metrics instead.
kubecostMetrics:
  # Optional
  # The metrics exporter is a separate deployment and service (for prometheus scrape auto-discovery)
  # which emits metrics cost-model relies on. Enabling this deployment also removes the KSM dependency
  # from the cost-model. If the deployment is not enabled, the metrics will continue to be emitted from
  # the cost-model.
  image: "126739741087.dkr.ecr.us-east-1.amazonaws.com/kubecost/kube-state-metrics"
  exporter:
    enabled: true
    port: 9005
    # Adds the default Prometheus scrape annotations to the metrics exporter service.
    # Set to false and use service.annotations (below) to set custom scrape annotations.
    prometheusScrape: true
    resources:
      requests:
        cpu: "10m"
        memory: "128Mi"
      limits:
        cpu: "20m"
        memory: "256Mi"



kubecostModel:
  image: "126739741087.dkr.ecr.us-east-1.amazonaws.com/kubecost/cost-model"
  imagePullPolicy: Always
  # extraEnv:
  # - name: SOME_VARIABLE
  #   value: "some_value"
  # securityContext:
  #   readOnlyRootFilesystem: true
  # Enables the emission of the kubecost_cloud_credit_total and
  # kubecost_cloud_expense_total metrics
  outOfClusterPromMetricsEnabled: false
  # Build local cost allocation cache
  warmCache: false
  # Build local savings cache
  warmSavingsCache: true
  # Run allocation ETL pipelines
  etl: true
  # Enable the ETL filestore backing storage
  etlFileStoreEnabled: true
  # The total number of days the ETL pipelines will build
  # Set to 0 to disable daily ETL (not recommended)
  etlDailyStoreDurationDays: 91
  # The total number of hours the ETL pipelines will build
  # Set to 0 to disable hourly ETL (not recommended)
  etlHourlyStoreDurationHours: 49
  # The total number of weeks the ETL pipelines will build
  # Set to 0 to disable weekly ETL (not recommended)
  # The default is 53 to ensure at least a year of coverage (371 days)
  etlWeeklyStoreDurationWeeks: 53
  # For deploying kubecost in a cluster that does not self-monitor
  etlReadOnlyMode: false

  ## Feature to view your out-of-cluster costs and their k8s utilization
  ## Ref: https://docs.kubecost.com/using-kubecost/navigating-the-kubecost-ui/cloud-costs-explorer
  cloudCost:
    enabled: true
    labelList:
      IsIncludeList: false
      # format labels as comma separated string (ex. "label1,label2,label3")
      labels: ""
    topNItems: 1000

  allocation:
    # Enables or disables adding node labels to allocation data (i.e. workloads).
    # Defaults to "true" and starts with a sensible includeList for basics like
    # topology (e.g. zone, region) and instance type labels.
    # nodeLabels:
    #   enabled: true
    #   includeList: "node.kubernetes.io/instance-type,topology.kubernetes.io/region,topology.kubernetes.io/zone"

  # Enables or disables the ContainerStats pipeline, used for quantile-based
  # queries like for request sizing recommendations.
  # ContainerStats provides support for quantile-based request right-sizing
  # recommendations.
  #
  # It is disabled by default to avoid problems in extremely high-scale Thanos
  # environments. If you would like to try quantile-based request-sizing
  # recommendations, enable this! If you are in a high-scale environment,
  # please monitor Kubecost logs, Thanos query logs, and Thanos load closely.
  # We hope to make major improvements at scale here soon!
  #
  # containerStatsEnabled: false

  # max number of concurrent Prometheus queries
  maxQueryConcurrency: 5
  resources:
    requests:
      cpu: "10m"
      memory: "128Mi"
    limits:
      cpu: "20m"
      memory: "256Mi"
  livenessProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    failureThreshold: 200
  extraArgs: []


# Define persistence volume for cost-analyzer, more information at https://github.com/kubecost/docs/blob/main/storage.md
persistentVolume:
  size: 10Gi
  dbSize: 10Gi
  enabled: true # Note that setting this to false means configurations will be wiped out on pod restart.
  storageClass: "ebs-sc" #
  existingClaim: kubecost-cost-analyzer # a claim in the same namespace as kubecost
  labels: {}
  annotations: {}

service:
  type: ClusterIP
  port: 9090
  targetPort: 9090
  # nodePort:
  labels: {}
  annotations: {}


prometheus:
  podSecurityPolicy:
    enabled: false

  server:
    # If clusterIDConfigmap is defined, instead use user-generated configmap with key CLUSTER_ID
    # to use as unique cluster ID in kubecost cost-analyzer deployment.
    # This overrides the cluster_id set in prometheus.server.global.external_labels.
    # NOTE: This does not affect the external_labels set in prometheus config.
    # clusterIDConfigmap: cluster-id-configmap
    image:
      repository: "126739741087.dkr.ecr.us-east-1.amazonaws.com/kubecost/prometheus"
      tag: v2.35.0
    resources:
      requests:
        cpu: "10m"
        memory: "128Mi"
      limits:
        cpu: "20m"
        memory: "256Mi"
    global:
      scrape_interval: 1m
      scrape_timeout: 60s
      evaluation_interval: 1m
      external_labels:
        cluster_id: cluster-one # Each cluster should have a unique ID
    persistentVolume:
      size: 10Gi
      enabled: true
    extraArgs:
      query.max-concurrency: 1
      query.max-samples: 100000000

  alertmanager:
    enabled: false
    persistentVolume:
      enabled: true
  # node-export must be disabled if there is an existing daemonset: https://guide.kubecost.com/hc/en-us/articles/4407601830679-Troubleshoot-Install#a-name-node-exporter-a-issue-failedscheduling-kubecost-prometheus-node-exporter
  nodeExporter:
    enabled: true
  # kubecost emits pre-2.0 KSM metrics, KSM is enabled by default here for backwards compatibity, but can be disabled to save resources without concern to kubecost metrics
  kubeStateMetrics:
    enabled: true
  kube-state-metrics:
    disabled: true
  pushgateway:
    enabled: false
    persistentVolume:
      enabled: true






reporting:
  # Kubecost bug report feature: Logs access/collection limited to .Release.Namespace
  # Ref: http://docs.kubecost.com/bug-report
  logCollection: true
  # Basic frontend analytics
  productAnalytics: true

  # Report Javascript errors
  errorReporting: true
  valuesReporting: true
  # googleAnalyticsTag allows you to embed your Google Global Site Tag to track usage of Kubecost.
  # googleAnalyticsTag is only included in our Enterprise offering.
  # googleAnalyticsTag: G-XXXXXXXXX


grafana:
  # namespace_datasources: kubecost # override the default namespace here
  # namespace_dashboards: kubecost # override the default namespace here
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: prometheus-kubecost
          type: prometheus
          url: http://kubecost-prometheus-server.kubecost.svc.cluster.local
          access: proxy
          isDefault: false
  sidecar:
    dashboards:
      requests:
        cpu: "10m"
        memory: "128Mi"
      limits:
        cpu: "20m"
        memory: "256Mi"
      enabled: true
      # label that the configmaps with dashboards are marked with
      label: grafana_dashboard
      # set sidecar ERROR_THROTTLE_SLEEP env var from default 5s to 0s -> fixes https://github.com/kubecost/cost-analyzer-helm-chart/issues/877
      annotations: {}
      error_throttle_sleep: 0

#  For grafana to be accessible, add the path to root_url. For example, if you run kubecost at www.foo.com:9090/kubecost
#  set root_url to "%(protocol)s://%(domain)s:%(http_port)s/kubecost/grafana". No change is necessary here if kubecost runs at a root URL
  grafana.ini:
    server:
      serve_from_sub_path: true
      root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana"
serviceAccount:
  create: true # Set this to false if you're bringing your own service account.
  annotations: {}
  # name: kc-test
